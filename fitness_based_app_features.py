# -*- coding: utf-8 -*-
"""FITNESS BASED APP FEATURES

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hWa5XhlkIJDnEEvWLSYnjrKuCqcUA_h6

#**MIND SECTION**

*   Personalized Meditation & Breathwork
*   Cognitive Skill Training
*   Focus Mode with Environmental AI: music/ pomodoro
*   AI Therapy Companion (chatbot)
*   Audio Emotion Logger
"""

!pip install streamlit pyngrok --quiet
!echo "auth_token: your_ngrok_token" > ~/.streamlit/secrets.toml  # optional
!streamlit run app_mind.py & npx localtunnel --port 8501

# app_mind.py
import streamlit as st
import time
import random
import datetime

st.set_page_config(page_title="MIND - Wellness", layout="centered")

st.title("🧘 MIND - Mental Fitness Suite")

# 1. Personalized Meditation
st.header("1. Personalized Meditation & Breathwork")
mood = st.selectbox("How are you feeling right now?", ["Stressed", "Anxious", "Tired", "Calm"])
duration = st.slider("How long do you want to meditate?", 5, 30, 10)

if st.button("Generate Meditation"):
    st.success(f"Here’s your {duration}-minute session for feeling {mood}:")
    if mood == "Stressed":
        st.write("👉 Box Breathing: Inhale 4s, Hold 4s, Exhale 4s, Hold 4s")
    elif mood == "Anxious":
        st.write("👉 4-7-8 Breathing: Inhale 4s, Hold 7s, Exhale 8s")
    elif mood == "Tired":
        st.write("👉 Energizing Breath: Short inhales, forceful exhales")
    else:
        st.write("👉 Mindfulness Scan: Focus attention on each body part")

# 2. Cognitive Training - Simple Brain Game
st.header("2. Brain Game: Memory Match")
if st.button("Start Game"):
    number = random.randint(100, 999)
    st.session_state['memory'] = number
    st.write("💡 Memorize this number:", number)
    time.sleep(3)
    st.empty()
    guess = st.text_input("What was the number?")
    if guess:
        if guess == str(st.session_state.get('memory')):
            st.success("Correct! 🧠 Great memory!")
        else:
            st.error(f"Oops! It was {st.session_state.get('memory')}")

# 3. Focus Mode (Pomodoro)
st.header("3. Focus Mode 🎧")
focus_time = st.number_input("Focus Time (minutes)", 5, 60, 25)
start_focus = st.button("Start Focus Session")

if start_focus:
    st.success(f"Focus for {focus_time} minutes. Play ambient music in another tab.")
    st.audio("https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3")
    st.write("⏳ Timer running... (start your task and focus)")
    time.sleep(2)

# 4. AI Therapy Companion (Simulated)
st.header("4. AI Therapy Companion 💬")
st.write("💡 This is a basic chat simulation.")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

user_input = st.text_input("You:")
if user_input:
    st.session_state.chat_history.append(("You", user_input))
    # Simulated response
    response = "Thanks for sharing. Can you tell me more about how that makes you feel?"
    st.session_state.chat_history.append(("Therapist", response))

for speaker, msg in st.session_state.chat_history:
    st.markdown(f"**{speaker}:** {msg}")

# 5. Audio Emotion Logger (Simulated)
st.header("5. 🎤 Audio Emotion Logger (Simulated)")
audio_file = st.file_uploader("Upload a voice recording", type=["wav", "mp3"])

if audio_file:
    st.audio(audio_file, format="audio/wav")
    # Simulate detection (in reality, you'd use a model)
    detected_emotion = random.choice(["Happy", "Sad", "Angry", "Calm", "Anxious"])
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.success(f"🧠 Detected Emotion: {detected_emotion} at {timestamp}")

    if "emotion_log" not in st.session_state:
        st.session_state.emotion_log = []
    st.session_state.emotion_log.append((timestamp, detected_emotion))

if "emotion_log" in st.session_state and st.session_state.emotion_log:
    st.subheader("📘 Emotion Log History")
    for ts, emo in reversed(st.session_state.emotion_log[-5:]):
        st.write(f"{ts} - {emo}")